// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String
  isArtist    Boolean  @default(false)
  bio         String?
  location    String?
  avatarUrl   String?
  portfolio   Portfolio?
  bookings    Booking[] @relation("UserBookings")
  artistBookings Booking[] @relation("ArtistBookings")
  reviews     Review[] @relation("UserReviews")
  artistReviews Review[] @relation("ArtistReviews")
  tattooDesigns TattooDesign[] // Added relation to tattoo designs
  createdAt   DateTime @default(now())
  experience  Int?     // Years of experience (artist only)
  hourlyRate  Int?     // Hourly rate in local currency (artist only)
  specialties String[] // Artist specialties (artist only)
  styles      String[] // Tattoo styles offered (artist only)
  avatarConfiguration Json? @map("avatar_configuration") // New field for avatar customization
}

model Portfolio {
  id        String     @id @default(cuid())
  artistId  String     @unique
  artist    User       @relation(fields: [artistId], references: [id])
  images    TattooImage[]
  styles    String[]   // e.g., ["realism", "traditional", "minimalist"]
  about     String?
}

model TattooImage {
  id          String   @id @default(cuid())
  url         String
  caption     String?
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
}

model Booking {
  id         String   @id @default(cuid())
  userId     String
  artistId   String
  date       DateTime
  status     String   // e.g., pending, confirmed, completed
  note       String?
  user       User     @relation("UserBookings", fields: [userId], references: [id])
  artist     User     @relation("ArtistBookings", fields: [artistId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  artistId  String
  rating    Int      
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation("UserReviews", fields: [userId], references: [id])
  artist    User     @relation("ArtistReviews", fields: [artistId], references: [id])
}

// New model for tattoo designs that artists can offer to clients
model TattooDesign {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  price       Float?
  size        String?  // e.g., "small", "medium", "large" or dimensions
  style       String   // e.g., "traditional", "realism", "blackwork"
  categories  String[] // For additional categorization
  artistId    String
  artist      User     @relation(fields: [artistId], references: [id])
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
